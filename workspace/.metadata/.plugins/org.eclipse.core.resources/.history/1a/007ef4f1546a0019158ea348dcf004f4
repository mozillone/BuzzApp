

import java.io.FileNotFoundException;
import java.util.Properties;

import javax.activation.*;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.io.IOException;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.jayway.restassured.RestAssured;
import com.jayway.restassured.response.Response;
import com.jayway.restassured.specification.RequestSpecification;

import Base.TestBase;
import Util.SendMailSSLWithAttachment;
import Util.emailReport;

public class MobileResponsiveApi extends TestBase{
	



	// Sheet name in which data need to be read.

	public MobileResponsiveApi() throws FileNotFoundException {
		super();
		// TODO Auto-generated constructor stub
	}

	String sheetName = "Sheet2";

	@BeforeClass
	public void setBaseUri() {
		RestAssured.baseURI = "http://beta.discover-prospects.com:8086/v4";

	}

	@SuppressWarnings("unchecked")
	@Test(dataProvider = "getBuzzApiTestData")
	public void Verify_CheckAvailabilityApi(String HostName) throws ParseException, FileNotFoundException {

		RequestSpecification request = RestAssured.given().header("Authorization",
				"Bearer 5e0a50d50229b7f0a49c2c6f814e01a9258ac927");

		request.header("Content-Type", "application/json");

		JSONObject requestParams = new JSONObject();

		requestParams.put("url", HostName);
		//requestParams.put("url", "https://support.office.com");

		System.out.println("Host Name is " + HostName);

		request.body(requestParams.toString());

		Response response = request.post("/website/responsive");

		long time = response.getTime();

		System.out.println(time);

		// String responseBody = response.getBody().asString();

		String responseBody = response.getBody().prettyPrint();

		int status = 200;

		// int statuscode = response.getStatusCode();

		// Assert.assertEquals(status, statuscode);
		try {
		Assert.assertNotEquals(status, response.getStatusCode());
		} catch(Error e){
			// Following lines will be printed when the assert condition fails
			System.out.println("Assert not equals failed. But test execution is not aborted.");
			System.out.println("Error message: " + e.toString());
		}

		// System.out.println("Response Body is =>" + responseBody);

		// JSONParser jp = new JSONParser();

		/*
		 * JSONObject jsonResult = (JSONObject) (jp.parse(responseBody));
		 * 
		 * JSONObject jsonStatus = (JSONObject) (jsonResult.get("status"));
		 * 
		 * JSONObject JsonMeta = (JSONObject) (jsonResult.get("meta"));
		 * 
		 * JSONObject jsonFP = (JSONObject) (jsonResult.get("result"));
		 * 
		 * String Status = jsonFP.get("status").toString();
		 * System.out.println(Status);
		 * 
		 * String fp_id = jsonFP.get("fp_id").toString();
		 * System.out.println(fp_id);
		 * 
		 * String reference_id= JsonMeta.get("request_reference_id").toString();
		 * System.out.println(reference_id);
		 */

	}

	@DataProvider
	public Object[][] getBuzzApiTestData()
			throws org.apache.poi.openxml4j.exceptions.InvalidFormatException, IOException {
		Object data[][] = Util.ExcelReader.getTestData(sheetName);
		return data;
	}

	@AfterClass
	public void Quit() {

		System.out.println("Completed the execution");
 
	}
	
	@AfterSuite
	public void sendemail(){
		

		@SuppressWarnings("unused")
		class emailReport {

		public void main(String[] args) {

		    final String username = "mozillone@gmail.com";
		    final String password = "9848250530";

		    Properties props = new Properties();
		    props.put("mail.smtp.auth", true);
		    props.put("mail.smtp.starttls.enable", true);
		    props.put("mail.smtp.host", "smtp.gmail.com");
		    props.put("mail.smtp.port", "587");

		    Session session = Session.getInstance(props,
		            new javax.mail.Authenticator() {
		                protected PasswordAuthentication getPasswordAuthentication() {
		                    return new PasswordAuthentication(username, password);
		                }
		            });

		    try {

		        Message message = new MimeMessage(session);
		        message.setFrom(new InternetAddress("mozillone@gmail.com"));
		        message.setRecipients(Message.RecipientType.TO,
		                InternetAddress.parse("suresh@ .com"));
		        message.setSubject("Testing Subject");
		        message.setText("PFA");

		        MimeBodyPart messageBodyPart = new MimeBodyPart();

		        Multipart multipart = new MimeMultipart();

		        messageBodyPart = new MimeBodyPart();
		        String file = "path of file to be attached";
		        String fileName = "attachment name";
		        DataSource source = new FileDataSource(file);
		        messageBodyPart.setDataHandler(new DataHandler(source));
		        messageBodyPart.setFileName(fileName);
		        multipart.addBodyPart(messageBodyPart);

		        message.setContent(multipart);

		        System.out.println("Sending");

		        Transport.send(message);

		        System.out.println("Done");

		    } catch (MessagingException e) {
		        e.printStackTrace();
		    }
		  }
		}
	}
}
